// Benaloh Encryption Scheme in Cryptol

// Recursive Euclidean Algorithm to find the GCD
gcd : Integer -> Integer -> Integer
gcd a b = if b == 0 then a else gcd b (a % b)

// prove this for both (r, p) and (r, q)
isCoprimeMinusOne : Integer -> Integer -> Bit
isCoprimeMinusOne a b = gcd a (b - 1) == 1

// prove this for (r, p)
isCoprimeDivR : Integer -> Integer -> Bit
isCoprimeDivR a b = if (a > 0) && (b > 0) && ((b - 1) % a == 0) then gcd a ((b - 1) / a) == 1 else False

// Experimental setup
p : Integer
p = 397

q : Integer
q = 191

n : Integer
n = p * q

phi : Integer
phi = (p-1) * (q-1)

r : Integer
r= 99

y : Integer
y = 13213

x : Integer
x = 24640

u : Integer
u = 66183


property r_isCoprimePMinusOne a b = ((a == r) && (b == p)) ==> isCoprimeMinusOne a b
property r_isCoprimeQMinusOne a b = ((a == r) && (b == q)) ==> isCoprimeMinusOne a b
property r_isCoprimePMinusOneDivR a b = ((a == r) && (b == p)) ==> isCoprimeDivR a b

// Encryption function
encrypt : Integer -> Integer -> Integer
encrypt m y = ((y ^^ m) * (u ^^ r)) % n

// Compute target
getA : Integer -> Integer -> Integer -> Integer
getA a b c = (a ^^ (b / c)) % n

// Recursive function to find the rth root
findRthRoot : Integer -> Integer -> Integer -> Integer -> Integer
findRthRoot base target pq currentRoot = 
  if currentRoot >= pq then 0
  else if base ^^ currentRoot % pq == target then currentRoot
  else findRthRoot base target pq (currentRoot + 1)

// Wrapper function to start the search from 0
findRoot : Integer -> Integer -> Integer -> Integer
findRoot x a n = findRthRoot x a n 0

// Decryption function using modInverse
decrypt : Integer -> Integer
decrypt c = findRoot x (getA c phi r) n

// Property to check if encryption followed by decryption returns the original message
property encryptDecryptIdentity message randY =
  (randY == y) ==> (decrypt (encrypt message randY) == message)

    
